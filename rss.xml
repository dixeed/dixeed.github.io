<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Dixeed Docs]]></title><description><![CDATA[A blog containing various documentations, tutorials and introductions created by Dixeed]]></description><link>https://dixeed.github.io/</link><generator>RSS for Node</generator><lastBuildDate>Mon, 26 Mar 2018 14:59:10 GMT</lastBuildDate><item><title><![CDATA[Hapi 17 Tutorial]]></title><description><![CDATA[The new major version of Hapi fully embraces the `async/await` feature brought in **ES2017 (ES8)**. This totally changes the way we interact with the framework and one should be comfortable with it to use this new version of Hapi]]></description><link>https://dixeed.github.io//posts/hapi-17-tutorial/</link><guid isPermaLink="false">https://dixeed.github.io//posts/hapi-17-tutorial/</guid><pubDate>Tue, 20 Mar 2018 22:40:32 GMT</pubDate><content:encoded>&lt;h1&gt;HAPI v17&lt;/h1&gt;
&lt;p&gt;The new major version of Hapi fully embraces the &lt;code class=&quot;language-text&quot;&gt;async/await&lt;/code&gt; feature brought in &lt;strong&gt;ES2017 (ES8)&lt;/strong&gt;. This totally changes the way we interact with the framework and one should be comfortable with it to use this new version of Hapi.&lt;/p&gt;
&lt;h2&gt;Disclaimer&lt;/h2&gt;
&lt;p&gt;This &lt;em&gt;tutorial&lt;/em&gt; is not meant to be exhaustive but rather hightlights the main changes that concerns us and then links to some additional resources that might help you deepen your knowledge.&lt;/p&gt;
&lt;h2&gt;Introduction to async/await&lt;/h2&gt;
&lt;p&gt;Async/await relies on the use of &lt;code class=&quot;language-text&quot;&gt;Promise&lt;/code&gt;. It is a new way of dealing with asynchronous operation and it makes them looks like synchronous operations.&lt;/p&gt;
&lt;p&gt;For the curious one, behind the scene async/await uses &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator&quot;&gt;generators&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Async keyword&lt;/h3&gt;
&lt;p&gt;The first part of this workflow is the &lt;code class=&quot;language-text&quot;&gt;async&lt;/code&gt; keyword. It is used to indicate that asynchronous operations are performed within a function. It works with all kind of function:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;anonymous function&lt;/li&gt;
&lt;li&gt;arrow function&lt;/li&gt;
&lt;li&gt;function expression&lt;/li&gt;
&lt;li&gt;function declaration&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is how it looks like:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;myAsyncFunction&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;When an &lt;code class=&quot;language-text&quot;&gt;async&lt;/code&gt; function is called it returns a promise that can be either resolved or rejected depending on what’s going on in the function. Any error thrown inside the function will result in the promise to be rejected whereas when no error occurs the promise will be resolved.&lt;/p&gt;
&lt;p&gt;You don’t have to return a promise yourself when you want to return a value in your &lt;code class=&quot;language-text&quot;&gt;async&lt;/code&gt; function because it wraps the value you return inside a promise aka the resolved promise value will be what you returned.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// both version are equals&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;notNeeded&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; Promise&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;betterVersion&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h3&gt;Await keyword&lt;/h3&gt;
&lt;p&gt;This keyword can only be used inside an &lt;code class=&quot;language-text&quot;&gt;async&lt;/code&gt; function which means that sometimes you’d have to do that:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; myValue &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;asynchronousOperation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;The above is called an IIFE which stands for &lt;strong&gt;immediately invoked function expression&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;await&lt;/code&gt; will pause the execution of your &lt;code class=&quot;language-text&quot;&gt;async&lt;/code&gt; function until the promise it waits will either resolve or reject. If the promise resolves you get back the resolve value of that promise. If it rejects, an exception will be raised with the reason. Then it resumes the function execution and continues if there are other operations to perform. Considering error handling when calling a asynchronous function with &lt;code class=&quot;language-text&quot;&gt;await&lt;/code&gt;, you have to surround it with &lt;code class=&quot;language-text&quot;&gt;try/catch&lt;/code&gt; block such as:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;myErrorHandling&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;asyncOp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;logService&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;If you don’t catch the error, it will bubble up the function call stack until it reaches the main scope which will cause the running process to crash like a sync error would do.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Side notes&lt;/strong&gt;: you can await any object that have a &lt;code class=&quot;language-text&quot;&gt;.then&lt;/code&gt; property. You can use await on any function returning a promise even if it is not declared as &lt;code class=&quot;language-text&quot;&gt;async&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Async/await gotchas&lt;/h3&gt;
&lt;h4&gt;1) sequence vs parallel execution&lt;/h4&gt;
&lt;p&gt;When dealing with multiple promises, don’t await every one of them because you’ll be slowing yourself down. Instead use &lt;code class=&quot;language-text&quot;&gt;Promise.all&lt;/code&gt; to get a promise for all of them and just &lt;code class=&quot;language-text&quot;&gt;await&lt;/code&gt; that promise. Here is a snippet showcasting this common error:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sequence&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;resolve &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;first timeout&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;resolve &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;second timeout&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;parallel&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; p1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;resolve &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;first timeout&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; p2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;resolve &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;second timeout&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; Promise&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;p1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; p2&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// will wait 2s display &apos;first timeout&apos;, wait 2s again and then display &apos;second timeout&apos; =&gt; total wait 4s&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;sequence&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// will wait 2s then display first timeout and second timeout at the same time (pretty much) =&gt; total wait 2s&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;parallel&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;As I said before, &lt;code class=&quot;language-text&quot;&gt;await&lt;/code&gt; will pause the execute of the async function until the promise it waits is settled.&lt;/p&gt;
&lt;h4&gt;2) Errors mixup&lt;/h4&gt;
&lt;p&gt;When using &lt;code class=&quot;language-text&quot;&gt;async/await&lt;/code&gt; errors get mixup between system error and business logic error. For example if a call to an &lt;code class=&quot;language-text&quot;&gt;fs&lt;/code&gt; function throws an error it would get caught by your &lt;code class=&quot;language-text&quot;&gt;try/catch&lt;/code&gt; the same way as would a &lt;code class=&quot;language-text&quot;&gt;throw Boom.notFound()&lt;/code&gt; hence you need a way to differentiate them. That’s where &lt;code class=&quot;language-text&quot;&gt;Bounce&lt;/code&gt; comes into play. This is a library introduced by Hapi’s creator: Eran Hammer. Taken from &lt;code class=&quot;language-text&quot;&gt;Bounce&lt;/code&gt; github README:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Working with async/await introduces a new challenge in handling errors. Unlike callbacks, which provide a dual mechanism for passing application errors via the callback err argument and developer errors via exceptions, await combines these two channels into one.&lt;/p&gt;
&lt;p&gt;It is common practice to ignore application errors in background processing or when there is no useful fallback. In those cases, it is still imperative to allow developer errors to surface and not get swallowed.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/hapijs/bounce#introduction&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;No need for me to repeat what is already well described over there so just have a look and read it.&lt;/p&gt;
&lt;p&gt;Here you go, you know the bare minimum required to use &lt;code class=&quot;language-text&quot;&gt;async/await&lt;/code&gt; in your code right now! Now go write some awesome code!&lt;/p&gt;
&lt;h2&gt;Hapi@17 difference&lt;/h2&gt;
&lt;p&gt;This section will not go into details about all the differences between the 16 and 17 version but rather compile what we used in our project and what changed about it. If you want a more detailed explanation head over &lt;a href=&quot;https://github.com/hapijs/hapi/issues/3658&quot;&gt;here&lt;/a&gt; and the &lt;a href=&quot;https://hapijs.com/api&quot;&gt;API documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Plugins&lt;/h3&gt;
&lt;h4&gt;Create a plugin&lt;/h4&gt;
&lt;p&gt;The way you create plugin has changed now. You don’t export a function with properties anymore but an object:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// before&lt;/span&gt;
module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;server&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; options&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; next&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;attributes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;myPlugin&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; version&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;1.0.0&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// now&lt;/span&gt;
module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;myPlugin&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  version&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;1.0.0&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;server&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; options&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// async operation&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Taken from &lt;a href=&quot;https://hapijs.com/tutorials/plugins?lang=en_US&quot;&gt;Hapi tutorial&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As we’ve seen above, the &lt;code class=&quot;language-text&quot;&gt;register&lt;/code&gt; method accepts two parameters, server and options.&lt;/p&gt;
&lt;p&gt;The options parameter is simply whatever options the user passes to your plugin when calling server.register(plugin, options). No changes are made and the object is passed directly to your register method.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;register&lt;/code&gt; should be an async function that returns once your plugin has completed whatever steps are necessary for it to be registered. Alternatively your register plugin should throw an error if an error occurred while registering your plugin.&lt;/p&gt;
&lt;p&gt;The &lt;code class=&quot;language-text&quot;&gt;server&lt;/code&gt; object is a reference to the server your plugin is being loaded in.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Registering a plugin&lt;/h4&gt;
&lt;p&gt;Loading a plugin is still done through the method &lt;code class=&quot;language-text&quot;&gt;server.register&lt;/code&gt;. You can register one or more plugins. The call to the method should be awaited so you make sure your plugin are loaded before doing action that could require the presence of such plugins. &lt;a href=&quot;https://hapijs.com/tutorials/plugins#loading-a-plugin&quot;&gt;Here&lt;/a&gt; are examples of the different ways you could load a plugin and how to pass options to them.&lt;/p&gt;
&lt;h3&gt;Routes&lt;/h3&gt;
&lt;h4&gt;Adding a route&lt;/h4&gt;
&lt;p&gt;Routes are still added through &lt;code class=&quot;language-text&quot;&gt;server.route&lt;/code&gt; method. The route object still have &lt;code class=&quot;language-text&quot;&gt;method&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;path&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;handler&lt;/code&gt; properties. However the &lt;code class=&quot;language-text&quot;&gt;config&lt;/code&gt; properties has been removed and is now &lt;a href=&quot;https://hapijs.com/api#route-options&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;options&lt;/code&gt;&lt;/a&gt;. The handler has changed also:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;server&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  method&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;GET&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  path&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;/test&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; h&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;hello&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Your handlers don’t receive the &lt;code class=&quot;language-text&quot;&gt;reply&lt;/code&gt; interface anymore. Instead you get a response toolkit. Taken from &lt;a href=&quot;https://hapijs.com/tutorials/routing?lang=en_US&quot;&gt;hapi’s tutorial&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The second parameter, h, is the response toolkit, an object with several methods used to respond to the request. As you’ve seen in the previous examples, if you wish to respond to a request with some value, you simply return it from the handler. The payload may be a string, a buffer, a JSON serializable object, a stream or a promise.&lt;/p&gt;
&lt;p&gt;Alternatively you may pass the same value to &lt;code class=&quot;language-text&quot;&gt;h.response(value)&lt;/code&gt; and return that from the handler. The result of this call is a response object, that can be chained with additional methods to alter the response before it is sent. For example &lt;code class=&quot;language-text&quot;&gt;h.response(&amp;#39;created&amp;#39;).code(201)&lt;/code&gt; will send a payload of created with an HTTP status code of 201. You may also set headers, content type, content length, send a redirection response, and many other things that are documented in the &lt;a href=&quot;https://hapijs.com/api#response-toolkit&quot;&gt;API reference&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Serving static content&lt;/h4&gt;
&lt;p&gt;Before going into details here, you have to make sure the &lt;code class=&quot;language-text&quot;&gt;inert&lt;/code&gt; plugin is loaded into your server. There are several ways to serve static content:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Return &lt;code class=&quot;language-text&quot;&gt;h.file(path)&lt;/code&gt; from your handler.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using a file handler:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;server&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
method&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;GET&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
path&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;/test-file&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
handler&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; file&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;pathToFile.png&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using a file handler with &lt;code class=&quot;language-text&quot;&gt;file&lt;/code&gt; function property with request params:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;server&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
method&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;GET&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
path&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;/{filename}&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
handler&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;params&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;filename&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There are other possibilities so have a look at &lt;a href=&quot;https://hapijs.com/tutorials/serving-files?lang=en_US&quot;&gt;Hapi’s official tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Access database instance&lt;/h4&gt;
&lt;p&gt;You can still access the database instance through the request object of your handler like you used to when using &lt;code class=&quot;language-text&quot;&gt;hapi-sequelizejs&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; h&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; db &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getDb&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// do awesome stuff&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;</content:encoded></item><item><title><![CDATA[NoSQL]]></title><description><![CDATA[An Introduction To NoSQL]]></description><link>https://dixeed.github.io//posts/no-sql/</link><guid isPermaLink="false">https://dixeed.github.io//posts/no-sql/</guid><pubDate>Mon, 19 Mar 2018 22:40:32 GMT</pubDate><content:encoded>&lt;h1&gt;NoSQL&lt;/h1&gt;
&lt;h2&gt;Definition&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;node&lt;/strong&gt;: In the context of distributed data store, a node represents a server in such a system which is linked to other servers.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In the context of a distributed data store the CAP theorem takes place which states that it is impossible for such data store to simutaneously provide more than two out of the following three guarantees:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;C&lt;/strong&gt;onsistency: every node in the system have access to the same data at the same moment.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A&lt;/strong&gt;vailability: every request receives a response without garantee that it contains the most recent version of the data.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;P&lt;/strong&gt;artition tolerance: The system continues to operate despite an arbitrary number of messages being dropped (or delayed) by the network between nodes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Source: &lt;a href=&quot;https://en.wikipedia.org/wiki/CAP_theorem&quot;&gt;Wikipedia&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Usually NoSQL database system are of: &lt;strong&gt;AP&lt;/strong&gt; or &lt;strong&gt;CP&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;Categories&lt;/h2&gt;
&lt;p&gt;This section will go through the main NoSQL categories mentioning some of their characteristics. The categories detailed are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;key/value paradigm&lt;/li&gt;
&lt;li&gt;document oriented&lt;/li&gt;
&lt;li&gt;column oriented&lt;/li&gt;
&lt;li&gt;graph oriented&lt;/li&gt;
&lt;li&gt;search engines&lt;/li&gt;
&lt;li&gt;time series database&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Key/value&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The simplest&lt;/li&gt;
&lt;li&gt;Every object is identified by an unique key which is the only way to request that object.&lt;/li&gt;
&lt;li&gt;The object structure is not constrained and the developer is free to do as he pleases. Be careful of what you create, it can become really messy.&lt;/li&gt;
&lt;li&gt;4 operations (CRUD).&lt;/li&gt;
&lt;li&gt;Usually has an HTTP Rest interface to interact with.&lt;/li&gt;
&lt;li&gt;Upsides: read/write performances are pretty high, can scale horizontaly.&lt;/li&gt;
&lt;li&gt;Values are of type string. You cannot query the content of data, for example if you store a JSON object you would not be able to make a query to select objects where &lt;code class=&quot;language-text&quot;&gt;firstname = &amp;#39;bob&amp;#39;&lt;/code&gt;. You’d have to do that in your programming language.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Document oriented&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;An extension of the key/value paradigm.&lt;/li&gt;
&lt;li&gt;Can query the object content.&lt;/li&gt;
&lt;li&gt;Made of document collection.&lt;/li&gt;
&lt;li&gt;Is schemaless so you don’t need to declare a schema structure as you would in a relational database.&lt;/li&gt;
&lt;li&gt;You can embed object within each other.&lt;/li&gt;
&lt;li&gt;Usually has an HTTP Rest interface to interact with.&lt;/li&gt;
&lt;li&gt;High performance, model flexibility. It is very well suited for CMS content management.&lt;/li&gt;
&lt;li&gt;Examples: MongoDB, RavenDB, CouchBase, CouchDB, DynamoDB.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Column oriented&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The most complicated.&lt;/li&gt;
&lt;li&gt;Data structure is suitable for data analysis processing and massive data processing.&lt;/li&gt;
&lt;li&gt;Base entity represents a data field. Every column is defined by a key/value pair.&lt;/li&gt;
&lt;li&gt;A column containing other columns is called a &lt;strong&gt;super column&lt;/strong&gt;. It is closed to the concept of a row in relational database. The key identifies the super column where the value is the list of columns it’s made of. The super column is not available in all NoSQL column oriented database.&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;column family&lt;/strong&gt; can regroup multiple columns. It is close to the table concept in relational database.&lt;/li&gt;
&lt;li&gt;It is possible to add a column or super column to any column family.&lt;/li&gt;
&lt;li&gt;Examples: Cassandra, Amazon SimpleDB, Google BigTable, Elasticsearch, HBase, Spark SQL.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Graph oriented&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Primarily used for network oriented data (cartography, relations between people)&lt;/li&gt;
&lt;li&gt;Use a storage engine for objects in the form of document oriented database where each entity within this database is called &lt;em&gt;node&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;It can describe relations between objects called &lt;em&gt;arc&lt;/em&gt;. An arc has an orientation and can hold properties.&lt;/li&gt;
&lt;li&gt;Examples: Neo4J, OrientDB, Info Grid, Infinite Graph&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Search Engines&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Tools designed for indexation and data search.&lt;/li&gt;
&lt;li&gt;Provide a distributed and multi-entity search engine usually through an HTTP Rest interface.&lt;/li&gt;
&lt;li&gt;Usually they embed a NoSQL database (document or column oriented database) with a layer of abstraction.&lt;/li&gt;
&lt;li&gt;Examples: ElasticSearch&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Time Series database&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Designed to handle chronological data series or table numbers indexed by hours: periodic temperature readings, chronological energy consumption readings, stock exchange price.&lt;/li&gt;
&lt;li&gt;Designed to handle complex logic or business rules and a high transaction volume for time based data series.&lt;/li&gt;
&lt;li&gt;Examples: Riak-TS, InfluxDB, eXtremDB.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;When to use NoSQL?&lt;/h2&gt;
&lt;h3&gt;Pros&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Becomes relevant when having more than 10 millions lines in the database, below that mark relational databases can perfectly be as good as NoSQL performance-wise (indexes all the things).&lt;/li&gt;
&lt;li&gt;It is easier to build a distributed and high-availability data source system using NoSQL than with relation databases.&lt;/li&gt;
&lt;li&gt;Dynamic database structure. You don’t have to define a structure thus two entities of the same type can have different structure.&lt;/li&gt;
&lt;li&gt;Easy to increase computational and storage capacity by adding new servers (horizontal scaling).&lt;/li&gt;
&lt;li&gt;It is easy and simple to request the system.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Cons&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;No transactional mode&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;No join&lt;/strong&gt;. In the context of distributed servers this would have a serious impact on the performance otherwise.&lt;/li&gt;
&lt;li&gt;Dynamic database structure. As the structure is not forced upon the developer you can do whatever you want but it can lead to numerous problem if not done right. There are &lt;strong&gt;no integrity contraints&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Can lead to race conditions for data update depending on the location of the server and the time needed to access it. The update to win the race is usually the one that performs the closest to the node storing the data.&lt;/li&gt;
&lt;li&gt;It is the developer’s job to ensure data integrity through its code as the database system doesn’t do it by itself.&lt;/li&gt;
&lt;li&gt;No query language standard. When you switch to another NoSQL database you’d have to rewrite your app because they do not share the same language syntax.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Context&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Capturing and requesting incoming data from a multitude of data sources such as surveillance network.&lt;/li&gt;
&lt;li&gt;Data Service: Web oriented services, high performance/scalability, customer oriented services.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Database design&lt;/h2&gt;
&lt;p&gt;As NoSQL database systems do not offer join feature you need to duplicate data to make the relation between them. Depending on the way you choose to structure your data it can have an impact on either read or write performance. You have to decide whether you want data integrity or better read performance.&lt;/p&gt;
&lt;p&gt;To handle relations between entities, you can either:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Fully embed the entities you are linked to in your document (&lt;strong&gt;good read performance&lt;/strong&gt; and &lt;strong&gt;slow write performance&lt;/strong&gt;) such as:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;// document Person&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Bob
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token property&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;47c24738-abe7-4391-9a1a-84dac6da35de&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token property&quot;&gt;&quot;firstname&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Bob&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token property&quot;&gt;&quot;lastname&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Henri&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token property&quot;&gt;&quot;mother&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token property&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;e415d0e8-919c-4b80-a82e-d0aecc6f4e06&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token property&quot;&gt;&quot;firstname&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Clara&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token property&quot;&gt;&quot;lastname&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Henri&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;// document Person: Clara
{
“id”: “e415d0e8-919c-4b80-a82e-d0aecc6f4e06”,
“firstname”: “Clara”,
“lastname”: “Henri”,
}&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;So if you wanted to update Henri&amp;#39;s mother information you&amp;#39;d have to update in both places. You should start to see how it can drastically impact your performance when you have to do multiple updates in different location. Let&amp;#39;s imagine we are not talking about the `mother` relationship but rather the `friends` which can also have sub-properties plus they can be spread over different nodes that might not be on the same continent. The complexity of the update would be exponential. The longer the update the least you are sure to request up-to-date data. That&amp;#39;s the reason you gain your read performance because each document includes everything you&amp;#39;d need to know but it comes with a write performance tradeoff.

2) Embed only the `id` of your document inside other linked documents (**slow read performance** and **good write performance**). If we continue with our previous example we would have:
```json
// document Person: Bob
{
  &amp;quot;id&amp;quot;: &amp;quot;47c24738-abe7-4391-9a1a-84dac6da35de&amp;quot;,
  &amp;quot;firstname&amp;quot;: &amp;quot;Bob&amp;quot;,
  &amp;quot;lastname&amp;quot;: &amp;quot;Henri&amp;quot;,
  &amp;quot;mother&amp;quot;: {
    &amp;quot;id&amp;quot;: &amp;quot;e415d0e8-919c-4b80-a82e-d0aecc6f4e06&amp;quot;
  }
}

// document Person: Clara
{
  &amp;quot;id&amp;quot;: &amp;quot;e415d0e8-919c-4b80-a82e-d0aecc6f4e06&amp;quot;,
  &amp;quot;firstname&amp;quot;: &amp;quot;Clara&amp;quot;,
  &amp;quot;lastname&amp;quot;: &amp;quot;Henri&amp;quot;,
}&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;The update would be much faster because the data would be stored only in one document thus all other linked documents would also be updated if an update is performed on the source document. However it would slow down the read action because you would need to jump between documents to find the information you are looking for. Again in a distributed data source context this could be quite an expensive operation to perform.&lt;/p&gt;
&lt;p&gt;In order to make the best design decision you’d need to know that upfront. For example, Facebook uses NoSQL database to store messages and posts because if they lose some information or if they are not all up-to-date that’s not really important however your critical information that they sell are stored in relation databases where you can ensure data integrity.&lt;/p&gt;
&lt;h2&gt;Best solutions&lt;/h2&gt;
&lt;h3&gt;Key/value&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Redis&lt;/li&gt;
&lt;li&gt;Oracle NoSQL Database&lt;/li&gt;
&lt;li&gt;Riak-TS&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Document oriented&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;MongoDB&lt;/li&gt;
&lt;li&gt;CouchDB&lt;/li&gt;
&lt;li&gt;CouchBase&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Column oriented&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Cassandra&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Graph oriented&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Neo4J&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Search Engines&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ElasticSearch&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;NoSQL will not replace relational databases but rather they solve problem that relation db are not good at.&lt;/p&gt;
&lt;p&gt;NoSQL databases should not be used for management software such as ERP or accountability software where data integrity is a must have and not really a tradeoff you can afford.&lt;/p&gt;
&lt;h3&gt;Aside: NewSQL&lt;/h3&gt;
&lt;p&gt;A new brand of database system rose: NewSQL. It combines the best of both worlds: SQL and NoSQL.&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MemSQL&lt;/li&gt;
&lt;li&gt;Google Scanner (only available in cloud)&lt;/li&gt;
&lt;li&gt;CockRoach&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PostgreSQL: there are extension to handle JSON data structure (key/value and document).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;As of 9.3, you can use JSON data types:&lt;/li&gt;
&lt;li&gt;JSON: stored as string and as such you should not query on their content which would have big performance impact.&lt;/li&gt;
&lt;li&gt;JSONB: stored as binary and content is searchable through &lt;code class=&quot;language-text&quot;&gt;@&amp;gt;&lt;/code&gt; operator with far less performance impact.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;VoltDB&lt;/li&gt;
&lt;li&gt;MariaDB&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Database optimization]]></title><description><![CDATA[Tips for database optimization]]></description><link>https://dixeed.github.io//posts/database-optimization/</link><guid isPermaLink="false">https://dixeed.github.io//posts/database-optimization/</guid><pubDate>Mon, 19 Mar 2018 20:40:32 GMT</pubDate><content:encoded>&lt;h1&gt;Database optimization&lt;/h1&gt;
&lt;h2&gt;PostgreSQL&lt;/h2&gt;
&lt;h3&gt;Indexes&lt;/h3&gt;
&lt;p&gt;One of the quickest and fastest way of increasing your database performance is to index your data. Several type of data should be indexed:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Primary Key: should be done automatically by the database engine.&lt;/li&gt;
&lt;li&gt;Foreign Key: it is not done by the database engine automatically so it is your responsability (or your ORM’s).&lt;/li&gt;
&lt;li&gt;Field in &lt;code class=&quot;language-text&quot;&gt;where&lt;/code&gt; clause: definitely not done automatically but increases performances.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;JSONB&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;JSONB&lt;/code&gt; type should be index using a &lt;code class=&quot;language-text&quot;&gt;gin()&lt;/code&gt; index.&lt;/p&gt;
&lt;h4&gt;Side notes&lt;/h4&gt;
&lt;p&gt;PostgreSQL does not handle composite indexes, it only indexes the first element so make sure you create indexes with only one element.&lt;/p&gt;
&lt;p&gt;30% to 40% of your database data should be indexed.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[How to create a public NPM package]]></title><link>https://dixeed.github.io//posts/create-public-npm-package/</link><guid isPermaLink="false">https://dixeed.github.io//posts/create-public-npm-package/</guid><pubDate>Fri, 19 Jan 2018 19:40:32 GMT</pubDate><content:encoded>&lt;div align=&quot;center&quot;&gt;
  &lt;h1&gt;How to create a public NPM package&lt;/h1&gt;
&lt;/div&gt;
&lt;h2&gt;Inspiration&lt;/h2&gt;
&lt;p&gt;This documentation is based on this &lt;a href=&quot;https://egghead.io/courses/how-to-write-an-open-source-javascript-library&quot;&gt;Egghead.io excellent video&lt;/a&gt; from &lt;a href=&quot;https://github.com/kentcdodds&quot;&gt;Kent C. Dodds&lt;/a&gt;. I recommend watching it. Huge thanks for his amazing work. :clap: :tada:&lt;/p&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;This documentation assumes that your repository is open source and hosted on &lt;strong&gt;Github&lt;/strong&gt; hence you should have created a public Github repository. You need then to &lt;strong&gt;clone&lt;/strong&gt; your repository on your computer to start working on it.&lt;/p&gt;
&lt;h2&gt;Steps&lt;/h2&gt;
&lt;h3&gt;Step 1: Setup NPM package boilerplate&lt;/h3&gt;
&lt;p&gt;Move into your project folder.&lt;/p&gt;
&lt;p&gt;You need to create the base files for your package. &lt;code class=&quot;language-text&quot;&gt;npm init&lt;/code&gt; will walk you through a set of questions and will generate a &lt;code class=&quot;language-text&quot;&gt;package.json&lt;/code&gt; file for you.&lt;/p&gt;
&lt;p&gt;Let’s consider a base &lt;code class=&quot;language-text&quot;&gt;package.json&lt;/code&gt; as the one below:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;docs&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;1.0.0&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;My description&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;index.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;echo \&quot;Error: no test specified\&quot; &amp;amp;&amp;amp; exit 1&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;repository&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;git&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;https://github.com/dixeed/docs.git&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;author&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Nargonath &amp;lt;jonas.pauthier@gmail.com&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;license&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;MIT&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;bugs&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;https://github.com/dixeed/docs/issues&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;homepage&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;https://github.com/dixeed/docs#readme&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h3&gt;Step 2: Setup Travis CI service&lt;/h3&gt;
&lt;p&gt;We’re going to use Travis as our CI (continuous integration) service.&lt;/p&gt;
&lt;p&gt;To get started you need to create an account (or connect if you already have one). Head &lt;a href=&quot;https://travis-ci.org/&quot;&gt;here&lt;/a&gt; to do so. You just need to use Github authentication to connect.&lt;/p&gt;
&lt;p&gt;Once connected you should access your profile:&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;images/PUBLIC_PACKAGE/travis_profile.png&quot; alt=&quot;Travis profile button&quot;&gt;
&lt;/p&gt;
&lt;p&gt;Here you have the list of your public Github repositories:&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;images/PUBLIC_PACKAGE/travis_own_repo.png&quot; alt=&quot;Travis repositories list&quot;&gt;
&lt;/p&gt;
&lt;p&gt;If you don’t find your project in the list, you can use the &lt;strong&gt;Sync account&lt;/strong&gt; that you can see on the above picture. It will update your Github information.&lt;/p&gt;
&lt;p&gt;If the repository you are working on is part of an &lt;a href=&quot;https://help.github.com/articles/collaborating-with-groups-in-organizations/&quot;&gt;Organization Github account&lt;/a&gt; you can find the list of your organizations on the left of your repositories list:&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;images/PUBLIC_PACKAGE/travis_org_list.png&quot; alt=&quot;Travis org list&quot;&gt;
&lt;/p&gt;
&lt;p&gt;Once you have found the repository you are working on, you just need to activate it using the switch on the left of its name:&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;images/PUBLIC_PACKAGE/travis_active_repo.png&quot; alt=&quot;Travis active repo&quot;&gt;
&lt;/p&gt;
&lt;p&gt;That’s it! Travis is enabled for your project. It does not work as is but we’ll get it working in the next section.&lt;/p&gt;
&lt;h3&gt;Step 3: Setup NPM&lt;/h3&gt;
&lt;p&gt;In order to publish NPM packages you also need an NPM account. Follow &lt;a href=&quot;https://www.npmjs.com/signup&quot;&gt;this link&lt;/a&gt; to create an account or log in with an existing one.&lt;/p&gt;
&lt;p&gt;If you want to publish your package as part of an NPM organization, you need to be a member of it thus you need to ask to an owner of the organization to invite you in.&lt;/p&gt;
&lt;h3&gt;Step 4: Setup automatic deployment tooling&lt;/h3&gt;
&lt;p&gt;Now that we have Travis configured we want to automate our deployment workflow. It will handle several things for us:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Our &lt;a href=&quot;http://semver.org/&quot;&gt;Semantic versioning&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Publish to NPM the new versions of our package.&lt;/li&gt;
&lt;li&gt;Create &lt;em&gt;Git tags&lt;/em&gt; in our Github repository.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To make all of this possible we are going to use a library: &lt;a href=&quot;https://github.com/semantic-release/semantic-release&quot;&gt;Semantic Release&lt;/a&gt;. It will read our commit messages and based on their content it will determine what &lt;em&gt;semver&lt;/em&gt; bump it needs to do (Major, Minor or Bugfix). To make its job easier (and possible) we need to enforce a particular commit message format. &lt;a href=&quot;https://github.com/angular/angular.js/blob/master/CONTRIBUTING.md#-git-commit-guidelines&quot;&gt;This is&lt;/a&gt; the format used by Angular team on their own repository.&lt;/p&gt;
&lt;p&gt;Ok, now that’s the introduction is done let’s do it.&lt;/p&gt;
&lt;h4&gt;Install required packages&lt;/h4&gt;
&lt;p&gt;We’ll need to install several development dependencies but we also need to install a global package to setup the last bit of the Travis configuration.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;For npm users:&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;npm i -D --save-exact @commitlint/cli @commitlint/config-angular commitizen cz-conventional-changelog husky lint-staged semantic-release prettier&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;npm i -g semantic-release-cli&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;For Yarn users:&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;yarn add -D --exact @commitlint/cli @commitlint/config-angular commitizen cz-conventional-changelog husky lint-staged semantic-release prettier&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;yarn global add semantic-release-cli&lt;/code&gt;&lt;/p&gt;
&lt;h5&gt;Explanations&lt;/h5&gt;
&lt;p&gt;Here is the purpose of each dependency:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/marionebl/commitlint&quot;&gt;@commitlint/cli&lt;/a&gt;: will lint our commit messages to make sure we are using the right format&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/marionebl/commitlint#shared-configuration&quot;&gt;@commitlint/config-angular&lt;/a&gt;: the configuration we are going to use. There are multiple different config but that’s the one we want.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/commitizen/cz-cli&quot;&gt;commitizen&lt;/a&gt;: CLI to help us write commit messages with the right format. It will ask us different questions to fill up the commit messages.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/commitizen/cz-conventional-changelog&quot;&gt;cz-conventional-changelog&lt;/a&gt;: will generate detailed changelog based on our commit messages.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/typicode/husky&quot;&gt;husky&lt;/a&gt;: adds git hooks for pre/post commit, pre/post push and so on.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/okonet/lint-staged&quot;&gt;lint-staged&lt;/a&gt;: allow us to run linters against staged git files and prevent commit if the linters spot errors/warnings.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/prettier/prettier&quot;&gt;prettier&lt;/a&gt;: formats our code&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Add configuration&lt;/h4&gt;
&lt;p&gt;Now that all the dependencies are installed we need to configure them. Add these parts to your package.json (they are supposed to be top keys):&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;cm&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;git-cz&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;commitmsg&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;commitlint -e&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;precommit&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;lint-staged&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;config&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;commitizen&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;path&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;cz-conventional-changelog&quot;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;lint-staged&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;{bin,config,scripts,test}/**/*.{js,css,json}&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;token string&quot;&gt;&quot;prettier --single-quote --write --print-width 100 --trailing-comma es5&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token string&quot;&gt;&quot;git add&quot;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;To use Commitizen we shouldn’t use &lt;code class=&quot;language-text&quot;&gt;git commit&lt;/code&gt; command anymore but &lt;code class=&quot;language-text&quot;&gt;git cz&lt;/code&gt; which is added by Commitizen itself. We added a script for that &lt;code class=&quot;language-text&quot;&gt;cm&lt;/code&gt; hence you just need to run &lt;code class=&quot;language-text&quot;&gt;npm/yarn run cm&lt;/code&gt;. &lt;strong&gt;Remember to run &lt;code class=&quot;language-text&quot;&gt;git add&lt;/code&gt; before&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;We configured Prettier to run against our &lt;em&gt;bin&lt;/em&gt;, &lt;em&gt;config&lt;/em&gt;, &lt;em&gt;scripts&lt;/em&gt; and &lt;em&gt;test&lt;/em&gt; folders. It will formats all js, css and json files in it. You can change the paths to better suit your project structure. The path follows &lt;a href=&quot;https://github.com/isaacs/node-glob&quot;&gt;glob pattern&lt;/a&gt; syntax. Thanks to lint-staged and husky Prettier will be run on our staged files before committing to make sure all committed code is formatted the same way in the whole project.&lt;/p&gt;
&lt;p&gt;You need to add &lt;code class=&quot;language-text&quot;&gt;commitlint.config.js&lt;/code&gt; at your project root as well. It should contain:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&apos;use strict&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;@commitlint/config-angular&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h4&gt;Finish Travis configuration&lt;/h4&gt;
&lt;p&gt;Before using the global CLI you installed previously, we need to make sure our &lt;code class=&quot;language-text&quot;&gt;repository&lt;/code&gt; field in the package.json is in the right format. It needs to be written that way:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;repository&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;git&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;https://github.com/dixeed/angularjs-scripts.git&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;If it is not, the CLI will crash so make sure it is. Of course, make sure to &lt;strong&gt;write your own Github repository URL&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Then you just need to run, &lt;code class=&quot;language-text&quot;&gt;semantic-release-cli setup&lt;/code&gt; in your project root. It will ask you a bunch of information:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Github credentials to generate a GITHUB_TOKEN used for Travis&lt;/li&gt;
&lt;li&gt;NPM credentials to publish the NPM package for you&lt;/li&gt;
&lt;li&gt;Which CI you want: Select &lt;em&gt;Travis&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Do you want a travis.yml file be generated for you? Say &lt;em&gt;Yes&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And you’ll be good to go. It will have added the &lt;code class=&quot;language-text&quot;&gt;travis.yml&lt;/code&gt; file at your project root and modified your &lt;code class=&quot;language-text&quot;&gt;package.json&lt;/code&gt;. Here is the information that are added/updated by semantic-release-cli:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;0.0.0-development&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;semantic-release&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;semantic-release pre &amp;amp;&amp;amp; npm publish &amp;amp;&amp;amp; semantic-release post&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;You don’t have to manage yourself your package version anymore, semantic-release will handle it for you after a successful Travis run.&lt;/p&gt;
&lt;p&gt;The script &lt;code class=&quot;language-text&quot;&gt;semantic-release&lt;/code&gt; will be runned during your Travis run and is responsible for generating your NPM package, publishing to NPM and creating the according &lt;em&gt;git tag&lt;/em&gt; in your Github repo along with the changelog.&lt;/p&gt;
&lt;p&gt;Now let’s take a look at the &lt;code class=&quot;language-text&quot;&gt;travis.yml&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-yml&quot;&gt;&lt;code class=&quot;language-yml&quot;&gt;language: node_js
cache:
  directories:
    - node_modules
notifications:
  email: false
node_js:
  - &amp;#39;8&amp;#39;
  - &amp;#39;7&amp;#39;
before_install:
  - npm install -g npm@latest
after_success:
  - npm run semantic-release
branches:
  except:
    - /^v\d+\.\d+\.\d+$/&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Your &lt;code class=&quot;language-text&quot;&gt;travis.yml&lt;/code&gt; might not be identical as this one so I’ll just pinpoint the import part:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make sure to always have a &lt;strong&gt;Node v8+&lt;/strong&gt; build in your configuration. Semantic-release does not work in an environment &amp;#x3C; Node v8.0.0. In Travis the run with the highest Node version is the build leader so it will be responsible of running the &lt;code class=&quot;language-text&quot;&gt;npm run semantic-release&lt;/code&gt; command.&lt;/li&gt;
&lt;li&gt;Your package will be runned against every node version specified in the &lt;code class=&quot;language-text&quot;&gt;node_js&lt;/code&gt; property. They all need to pass for your build to succeed.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you are using the latest version of NPM, make sure to update it before Travis installs your project dependencies by adding:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-yml&quot;&gt;&lt;code class=&quot;language-yml&quot;&gt;before_install:
- npm install -g npm@latest&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;The part with &lt;code class=&quot;language-text&quot;&gt;npm prune&lt;/code&gt; might not be useful so you can delete it. It can even be a problem and remove semantic-release hence preventing you from publishing. (That’s the conclusion I came to but if I’m wrong feel free to make a PR and correct that :+1: ).&lt;/li&gt;
&lt;li&gt;Travis runs by default your &lt;code class=&quot;language-text&quot;&gt;npm/yarn test&lt;/code&gt; script defined in your &lt;code class=&quot;language-text&quot;&gt;package.json&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Step 5: Add NPM metadata&lt;/h3&gt;
&lt;p&gt;To provide NPM with as much information about your package we have to update your &lt;code class=&quot;language-text&quot;&gt;package.json&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;First if you want to publish your package as a &lt;strong&gt;scoped package&lt;/strong&gt; meaning that it is part of an organization then you need to update your package name as is: &lt;code class=&quot;language-text&quot;&gt;&amp;quot;name&amp;quot;: &amp;quot;@scope/packageName&amp;quot;&lt;/code&gt; i.e for an organization named &lt;code class=&quot;language-text&quot;&gt;dixeed&lt;/code&gt; and a package &lt;code class=&quot;language-text&quot;&gt;utils&lt;/code&gt; the updated name would be: &lt;code class=&quot;language-text&quot;&gt;@dixeed/utils&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Make sure you have a &lt;code class=&quot;language-text&quot;&gt;main&lt;/code&gt; field as well. See &lt;a href=&quot;https://docs.npmjs.com/files/package.json#main&quot;&gt;this&lt;/a&gt; for more information.&lt;/p&gt;
&lt;p&gt;Then you can add &lt;code class=&quot;language-text&quot;&gt;keywords&lt;/code&gt; to your package to help users searching for it in the NPM registry. See &lt;a href=&quot;https://docs.npmjs.com/files/package.json#keywords&quot;&gt;this&lt;/a&gt; for more information.&lt;/p&gt;
&lt;p&gt;You need also to specify which files needs to be part of your package for your users to properly use it. See &lt;a href=&quot;https://docs.npmjs.com/files/package.json#files&quot;&gt;this&lt;/a&gt; for more information. A good rule of thumb is that &lt;strong&gt;if your package does not depend on a file or folder to run don’t add it&lt;/strong&gt; i.e tests folder. If your package is compiled by some library (webpack, rollup, babel …) you might want to include only the files resulting from their build.&lt;/p&gt;
&lt;p&gt;If your package depends on particular version of node or npm you can specify it in the &lt;code class=&quot;language-text&quot;&gt;engines&lt;/code&gt; field. See &lt;a href=&quot;https://docs.npmjs.com/files/package.json#engines&quot;&gt;here&lt;/a&gt; for more information.&lt;/p&gt;
&lt;p&gt;Fields to consider depending on your needs: &lt;a href=&quot;https://docs.npmjs.com/files/package.json#peerdependencies&quot;&gt;peerDependencies&lt;/a&gt;, &lt;a href=&quot;https://docs.npmjs.com/files/package.json#bin&quot;&gt;bin&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Full documentation is &lt;a href=&quot;https://docs.npmjs.com/files/package.json&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Step 6: Commit your awesome work!&lt;/h3&gt;
&lt;p&gt;Everyting has been setup in the previous steps for your environment to deploy your package. You just need to actually commit your work for semantic-release to have something to work with.&lt;/p&gt;
&lt;p&gt;When using &lt;code class=&quot;language-text&quot;&gt;npm/yarn run cm&lt;/code&gt; you will be prompted about which kind of commit you are trying to do. You should know that only two types actually impact your package semver:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;feat&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Alone a &lt;code class=&quot;language-text&quot;&gt;feat&lt;/code&gt; commit with bump the minor version number.&lt;/li&gt;
&lt;li&gt;If the commit message comes with a &lt;code class=&quot;language-text&quot;&gt;BREAKING CHANGE:&lt;/code&gt; in its footer then it will bump the major version number.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;fix&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It will bump your bugfix version number.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Semantic-release will aggregate your different commits to determine your next semver version i.e if you have 2 bugfixes and 5 feat commit (without any breaking change mentions) it will gather all of them under one single minor version bump. So if your previous version was: &lt;em&gt;v1.3.4&lt;/em&gt; the next one will be &lt;em&gt;v1.4.0&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;You need to be using semantic-release from the ground up. Just make sure to push your commits on master once you are satisfied for a &lt;code class=&quot;language-text&quot;&gt;v1.0.0&lt;/code&gt; release. Semantic-release will always push your first version as &lt;code class=&quot;language-text&quot;&gt;v1.0.0&lt;/code&gt;. If you want to commit your Work In Progress just create a &lt;code class=&quot;language-text&quot;&gt;dev&lt;/code&gt; branch and work on it until you’re satisfied with your current work state for the release then merge it on master and push.&lt;/p&gt;
&lt;h3&gt;Optional&lt;/h3&gt;
&lt;p&gt;If you don’t want to publish on NPM but rather just use semantic-release for your project versioning, you can take a look at &lt;a href=&quot;https://github.com/finom/last-release-git&quot;&gt;last-release-git&lt;/a&gt;.&lt;/p&gt;</content:encoded></item></channel></rss>