webpackJsonp([0xf9df927ace5b],{391:function(e,n){e.exports={data:{site:{siteMetadata:{title:"Dixeed Docs",subtitle:"A blog containing various documentations, tutorials and introductions created by Dixeed",copyright:"Dixeed © All rights reserved.",author:{name:"Dixeed",twitter:"dixeed"},disqusShortname:"",url:"https://dixeed.github.io/"}},markdownRemark:{id:"/home/giaat/workspace/dixeed/github-page/src/pages/articles/2018-19-03--Public-Package/index.md absPath of file >>> MarkdownRemark",html:'<div align="center">\n  <h1>How to create a public NPM package</h1>\n</div>\n<h2>Inspiration</h2>\n<p>This documentation is based on this <a href="https://egghead.io/courses/how-to-write-an-open-source-javascript-library">Egghead.io excellent video</a> from <a href="https://github.com/kentcdodds">Kent C. Dodds</a>. I recommend watching it. Huge thanks for his amazing work. :clap: :tada:</p>\n<h2>Requirements</h2>\n<p>This documentation assumes that your repository is open source and hosted on <strong>Github</strong> hence you should have created a public Github repository. You need then to <strong>clone</strong> your repository on your computer to start working on it.</p>\n<h2>Steps</h2>\n<h3>Step 1: Setup NPM package boilerplate</h3>\n<p>Move into your project folder.</p>\n<p>You need to create the base files for your package. <code class="language-text">npm init</code> will walk you through a set of questions and will generate a <code class="language-text">package.json</code> file for you.</p>\n<p>Let’s consider a base <code class="language-text">package.json</code> as the one below:</p>\n<div class="gatsby-highlight">\n      <pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>\n  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"docs"</span><span class="token punctuation">,</span>\n  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>\n  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"My description"</span><span class="token punctuation">,</span>\n  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"index.js"</span><span class="token punctuation">,</span>\n  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"echo \\"Error: no test specified\\" &amp;&amp; exit 1"</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token property">"repository"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"git"</span><span class="token punctuation">,</span>\n    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://github.com/dixeed/docs.git"</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">"Nargonath &lt;jonas.pauthier@gmail.com>"</span><span class="token punctuation">,</span>\n  <span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"MIT"</span><span class="token punctuation">,</span>\n  <span class="token property">"bugs"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://github.com/dixeed/docs/issues"</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token property">"homepage"</span><span class="token operator">:</span> <span class="token string">"https://github.com/dixeed/docs#readme"</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h3>Step 2: Setup Travis CI service</h3>\n<p>We’re going to use Travis as our CI (continuous integration) service.</p>\n<p>To get started you need to create an account (or connect if you already have one). Head <a href="https://travis-ci.org/">here</a> to do so. You just need to use Github authentication to connect.</p>\n<p>Once connected you should access your profile:</p>\n<p align="center">\n  <img src="images/PUBLIC_PACKAGE/travis_profile.png" alt="Travis profile button">\n</p>\n<p>Here you have the list of your public Github repositories:</p>\n<p align="center">\n  <img src="images/PUBLIC_PACKAGE/travis_own_repo.png" alt="Travis repositories list">\n</p>\n<p>If you don’t find your project in the list, you can use the <strong>Sync account</strong> that you can see on the above picture. It will update your Github information.</p>\n<p>If the repository you are working on is part of an <a href="https://help.github.com/articles/collaborating-with-groups-in-organizations/">Organization Github account</a> you can find the list of your organizations on the left of your repositories list:</p>\n<p align="center">\n  <img src="images/PUBLIC_PACKAGE/travis_org_list.png" alt="Travis org list">\n</p>\n<p>Once you have found the repository you are working on, you just need to activate it using the switch on the left of its name:</p>\n<p align="center">\n  <img src="images/PUBLIC_PACKAGE/travis_active_repo.png" alt="Travis active repo">\n</p>\n<p>That’s it! Travis is enabled for your project. It does not work as is but we’ll get it working in the next section.</p>\n<h3>Step 3: Setup NPM</h3>\n<p>In order to publish NPM packages you also need an NPM account. Follow <a href="https://www.npmjs.com/signup">this link</a> to create an account or log in with an existing one.</p>\n<p>If you want to publish your package as part of an NPM organization, you need to be a member of it thus you need to ask to an owner of the organization to invite you in.</p>\n<h3>Step 4: Setup automatic deployment tooling</h3>\n<p>Now that we have Travis configured we want to automate our deployment workflow. It will handle several things for us:</p>\n<ul>\n<li>Our <a href="http://semver.org/">Semantic versioning</a>.</li>\n<li>Publish to NPM the new versions of our package.</li>\n<li>Create <em>Git tags</em> in our Github repository.</li>\n</ul>\n<p>To make all of this possible we are going to use a library: <a href="https://github.com/semantic-release/semantic-release">Semantic Release</a>. It will read our commit messages and based on their content it will determine what <em>semver</em> bump it needs to do (Major, Minor or Bugfix). To make its job easier (and possible) we need to enforce a particular commit message format. <a href="https://github.com/angular/angular.js/blob/master/CONTRIBUTING.md#-git-commit-guidelines">This is</a> the format used by Angular team on their own repository.</p>\n<p>Ok, now that’s the introduction is done let’s do it.</p>\n<h4>Install required packages</h4>\n<p>We’ll need to install several development dependencies but we also need to install a global package to setup the last bit of the Travis configuration.</p>\n<p><em>For npm users:</em></p>\n<p><code class="language-text">npm i -D --save-exact @commitlint/cli @commitlint/config-angular commitizen cz-conventional-changelog husky lint-staged semantic-release prettier</code></p>\n<p><code class="language-text">npm i -g semantic-release-cli</code></p>\n<p><em>For Yarn users:</em></p>\n<p><code class="language-text">yarn add -D --exact @commitlint/cli @commitlint/config-angular commitizen cz-conventional-changelog husky lint-staged semantic-release prettier</code></p>\n<p><code class="language-text">yarn global add semantic-release-cli</code></p>\n<h5>Explanations</h5>\n<p>Here is the purpose of each dependency:</p>\n<ul>\n<li><a href="https://github.com/marionebl/commitlint">@commitlint/cli</a>: will lint our commit messages to make sure we are using the right format</li>\n<li><a href="https://github.com/marionebl/commitlint#shared-configuration">@commitlint/config-angular</a>: the configuration we are going to use. There are multiple different config but that’s the one we want.</li>\n<li><a href="https://github.com/commitizen/cz-cli">commitizen</a>: CLI to help us write commit messages with the right format. It will ask us different questions to fill up the commit messages.</li>\n<li><a href="https://github.com/commitizen/cz-conventional-changelog">cz-conventional-changelog</a>: will generate detailed changelog based on our commit messages.</li>\n<li><a href="https://github.com/typicode/husky">husky</a>: adds git hooks for pre/post commit, pre/post push and so on.</li>\n<li><a href="https://github.com/okonet/lint-staged">lint-staged</a>: allow us to run linters against staged git files and prevent commit if the linters spot errors/warnings.</li>\n<li><a href="https://github.com/prettier/prettier">prettier</a>: formats our code</li>\n</ul>\n<h4>Add configuration</h4>\n<p>Now that all the dependencies are installed we need to configure them. Add these parts to your package.json (they are supposed to be top keys):</p>\n<div class="gatsby-highlight">\n      <pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>\n  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"cm"</span><span class="token operator">:</span> <span class="token string">"git-cz"</span><span class="token punctuation">,</span>\n    <span class="token property">"commitmsg"</span><span class="token operator">:</span> <span class="token string">"commitlint -e"</span><span class="token punctuation">,</span>\n    <span class="token property">"precommit"</span><span class="token operator">:</span> <span class="token string">"lint-staged"</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token property">"config"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"commitizen"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"cz-conventional-changelog"</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token property">"lint-staged"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"{bin,config,scripts,test}/**/*.{js,css,json}"</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token string">"prettier --single-quote --write --print-width 100 --trailing-comma es5"</span><span class="token punctuation">,</span>\n      <span class="token string">"git add"</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>To use Commitizen we shouldn’t use <code class="language-text">git commit</code> command anymore but <code class="language-text">git cz</code> which is added by Commitizen itself. We added a script for that <code class="language-text">cm</code> hence you just need to run <code class="language-text">npm/yarn run cm</code>. <strong>Remember to run <code class="language-text">git add</code> before</strong>.</p>\n<p>We configured Prettier to run against our <em>bin</em>, <em>config</em>, <em>scripts</em> and <em>test</em> folders. It will formats all js, css and json files in it. You can change the paths to better suit your project structure. The path follows <a href="https://github.com/isaacs/node-glob">glob pattern</a> syntax. Thanks to lint-staged and husky Prettier will be run on our staged files before committing to make sure all committed code is formatted the same way in the whole project.</p>\n<p>You need to add <code class="language-text">commitlint.config.js</code> at your project root as well. It should contain:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token string">\'use strict\'</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token keyword">extends</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'@commitlint/config-angular\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<h4>Finish Travis configuration</h4>\n<p>Before using the global CLI you installed previously, we need to make sure our <code class="language-text">repository</code> field in the package.json is in the right format. It needs to be written that way:</p>\n<div class="gatsby-highlight">\n      <pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>\n  <span class="token property">"repository"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"git"</span><span class="token punctuation">,</span>\n      <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://github.com/dixeed/angularjs-scripts.git"</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>If it is not, the CLI will crash so make sure it is. Of course, make sure to <strong>write your own Github repository URL</strong>.</p>\n<p>Then you just need to run, <code class="language-text">semantic-release-cli setup</code> in your project root. It will ask you a bunch of information:</p>\n<ul>\n<li>Github credentials to generate a GITHUB_TOKEN used for Travis</li>\n<li>NPM credentials to publish the NPM package for you</li>\n<li>Which CI you want: Select <em>Travis</em></li>\n<li>Do you want a travis.yml file be generated for you? Say <em>Yes</em>.</li>\n</ul>\n<p>And you’ll be good to go. It will have added the <code class="language-text">travis.yml</code> file at your project root and modified your <code class="language-text">package.json</code>. Here is the information that are added/updated by semantic-release-cli:</p>\n<div class="gatsby-highlight">\n      <pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>\n  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"0.0.0-development"</span><span class="token punctuation">,</span>\n  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"semantic-release"</span><span class="token operator">:</span> <span class="token string">"semantic-release pre &amp;&amp; npm publish &amp;&amp; semantic-release post"</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>You don’t have to manage yourself your package version anymore, semantic-release will handle it for you after a successful Travis run.</p>\n<p>The script <code class="language-text">semantic-release</code> will be runned during your Travis run and is responsible for generating your NPM package, publishing to NPM and creating the according <em>git tag</em> in your Github repo along with the changelog.</p>\n<p>Now let’s take a look at the <code class="language-text">travis.yml</code> file:</p>\n<div class="gatsby-highlight">\n      <pre class="language-yml"><code class="language-yml">language: node_js\ncache:\n  directories:\n    - node_modules\nnotifications:\n  email: false\nnode_js:\n  - &#39;8&#39;\n  - &#39;7&#39;\nbefore_install:\n  - npm install -g npm@latest\nafter_success:\n  - npm run semantic-release\nbranches:\n  except:\n    - /^v\\d+\\.\\d+\\.\\d+$/</code></pre>\n      </div>\n<p>Your <code class="language-text">travis.yml</code> might not be identical as this one so I’ll just pinpoint the import part:</p>\n<ul>\n<li>Make sure to always have a <strong>Node v8+</strong> build in your configuration. Semantic-release does not work in an environment &#x3C; Node v8.0.0. In Travis the run with the highest Node version is the build leader so it will be responsible of running the <code class="language-text">npm run semantic-release</code> command.</li>\n<li>Your package will be runned against every node version specified in the <code class="language-text">node_js</code> property. They all need to pass for your build to succeed.</li>\n<li>\n<p>If you are using the latest version of NPM, make sure to update it before Travis installs your project dependencies by adding:</p>\n<div class="gatsby-highlight">\n      <pre class="language-yml"><code class="language-yml">before_install:\n- npm install -g npm@latest</code></pre>\n      </div>\n</li>\n<li>The part with <code class="language-text">npm prune</code> might not be useful so you can delete it. It can even be a problem and remove semantic-release hence preventing you from publishing. (That’s the conclusion I came to but if I’m wrong feel free to make a PR and correct that :+1: ).</li>\n<li>Travis runs by default your <code class="language-text">npm/yarn test</code> script defined in your <code class="language-text">package.json</code>.</li>\n</ul>\n<h3>Step 5: Add NPM metadata</h3>\n<p>To provide NPM with as much information about your package we have to update your <code class="language-text">package.json</code>.</p>\n<p>First if you want to publish your package as a <strong>scoped package</strong> meaning that it is part of an organization then you need to update your package name as is: <code class="language-text">&quot;name&quot;: &quot;@scope/packageName&quot;</code> i.e for an organization named <code class="language-text">dixeed</code> and a package <code class="language-text">utils</code> the updated name would be: <code class="language-text">@dixeed/utils</code>.</p>\n<p>Make sure you have a <code class="language-text">main</code> field as well. See <a href="https://docs.npmjs.com/files/package.json#main">this</a> for more information.</p>\n<p>Then you can add <code class="language-text">keywords</code> to your package to help users searching for it in the NPM registry. See <a href="https://docs.npmjs.com/files/package.json#keywords">this</a> for more information.</p>\n<p>You need also to specify which files needs to be part of your package for your users to properly use it. See <a href="https://docs.npmjs.com/files/package.json#files">this</a> for more information. A good rule of thumb is that <strong>if your package does not depend on a file or folder to run don’t add it</strong> i.e tests folder. If your package is compiled by some library (webpack, rollup, babel …) you might want to include only the files resulting from their build.</p>\n<p>If your package depends on particular version of node or npm you can specify it in the <code class="language-text">engines</code> field. See <a href="https://docs.npmjs.com/files/package.json#engines">here</a> for more information.</p>\n<p>Fields to consider depending on your needs: <a href="https://docs.npmjs.com/files/package.json#peerdependencies">peerDependencies</a>, <a href="https://docs.npmjs.com/files/package.json#bin">bin</a>.</p>\n<p>Full documentation is <a href="https://docs.npmjs.com/files/package.json">here</a>.</p>\n<h3>Step 6: Commit your awesome work!</h3>\n<p>Everyting has been setup in the previous steps for your environment to deploy your package. You just need to actually commit your work for semantic-release to have something to work with.</p>\n<p>When using <code class="language-text">npm/yarn run cm</code> you will be prompted about which kind of commit you are trying to do. You should know that only two types actually impact your package semver:</p>\n<ul>\n<li>\n<p><code class="language-text">feat</code></p>\n<ul>\n<li>Alone a <code class="language-text">feat</code> commit with bump the minor version number.</li>\n<li>If the commit message comes with a <code class="language-text">BREAKING CHANGE:</code> in its footer then it will bump the major version number.</li>\n</ul>\n</li>\n<li>\n<p><code class="language-text">fix</code></p>\n<ul>\n<li>It will bump your bugfix version number.</li>\n</ul>\n</li>\n</ul>\n<p>Semantic-release will aggregate your different commits to determine your next semver version i.e if you have 2 bugfixes and 5 feat commit (without any breaking change mentions) it will gather all of them under one single minor version bump. So if your previous version was: <em>v1.3.4</em> the next one will be <em>v1.4.0</em>.</p>\n<p>You need to be using semantic-release from the ground up. Just make sure to push your commits on master once you are satisfied for a <code class="language-text">v1.0.0</code> release. Semantic-release will always push your first version as <code class="language-text">v1.0.0</code>. If you want to commit your Work In Progress just create a <code class="language-text">dev</code> branch and work on it until you’re satisfied with your current work state for the release then merge it on master and push.</p>\n<h3>Optional</h3>\n<p>If you don’t want to publish on NPM but rather just use semantic-release for your project versioning, you can take a look at <a href="https://github.com/finom/last-release-git">last-release-git</a>.</p>',fields:{tagSlugs:["/tags/npm/","/tags/package/"]},frontmatter:{title:"How to create a public NPM package",tags:["npm","package"],date:"2018-01-19T19:40:32.169Z",description:""}}},pathContext:{slug:"/posts/create-public-npm-package/"}}}});
//# sourceMappingURL=path---posts-create-public-npm-package-3d204d60a1f5763a021a.js.map