webpackJsonp([0xe3df070e6467],{393:function(n,s){n.exports={data:{site:{siteMetadata:{title:"Dixeed Docs",subtitle:"A blog containing various documentations, tutorials and introductions created by Dixeed",copyright:"Dixeed © All rights reserved.",author:{name:"Dixeed",twitter:"dixeed"},disqusShortname:"",url:"https://dixeed.github.io/"}},markdownRemark:{id:"/home/giaat/workspace/dixeed/github-page/src/pages/articles/2018-20-03---Hapi-17-Tutorial/index.md absPath of file >>> MarkdownRemark",html:'<h1>HAPI v17</h1>\n<p>The new major version of Hapi fully embraces the <code class="language-text">async/await</code> feature brought in <strong>ES2017 (ES8)</strong>. This totally changes the way we interact with the framework and one should be comfortable with it to use this new version of Hapi.</p>\n<h2>Disclaimer</h2>\n<p>This <em>tutorial</em> is not meant to be exhaustive but rather hightlights the main changes that concerns us and then links to some additional resources that might help you deepen your knowledge.</p>\n<h2>Introduction to async/await</h2>\n<p>Async/await relies on the use of <code class="language-text">Promise</code>. It is a new way of dealing with asynchronous operation and it makes them looks like synchronous operations.</p>\n<p>For the curious one, behind the scene async/await uses <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator">generators</a>.</p>\n<h3>Async keyword</h3>\n<p>The first part of this workflow is the <code class="language-text">async</code> keyword. It is used to indicate that asynchronous operations are performed within a function. It works with all kind of function:</p>\n<ul>\n<li>anonymous function</li>\n<li>arrow function</li>\n<li>function expression</li>\n<li>function declaration</li>\n</ul>\n<p>Here is how it looks like:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">myAsyncFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>When an <code class="language-text">async</code> function is called it returns a promise that can be either resolved or rejected depending on what’s going on in the function. Any error thrown inside the function will result in the promise to be rejected whereas when no error occurs the promise will be resolved.</p>\n<p>You don’t have to return a promise yourself when you want to return a value in your <code class="language-text">async</code> function because it wraps the value you return inside a promise aka the resolved promise value will be what you returned.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// both version are equals</span>\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">notNeeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">betterVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h3>Await keyword</h3>\n<p>This keyword can only be used inside an <code class="language-text">async</code> function which means that sometimes you’d have to do that:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> myValue <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">asynchronousOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>The above is called an IIFE which stands for <strong>immediately invoked function expression</strong>.</p>\n<p><code class="language-text">await</code> will pause the execution of your <code class="language-text">async</code> function until the promise it waits will either resolve or reject. If the promise resolves you get back the resolve value of that promise. If it rejects, an exception will be raised with the reason. Then it resumes the function execution and continues if there are other operations to perform. Considering error handling when calling a asynchronous function with <code class="language-text">await</code>, you have to surround it with <code class="language-text">try/catch</code> block such as:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">myErrorHandling</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n    value <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">asyncOp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">logService</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> value<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>If you don’t catch the error, it will bubble up the function call stack until it reaches the main scope which will cause the running process to crash like a sync error would do.</p>\n<p><strong>Side notes</strong>: you can await any object that have a <code class="language-text">.then</code> property. You can use await on any function returning a promise even if it is not declared as <code class="language-text">async</code>.</p>\n<h3>Async/await gotchas</h3>\n<h4>1) sequence vs parallel execution</h4>\n<p>When dealing with multiple promises, don’t await every one of them because you’ll be slowing yourself down. Instead use <code class="language-text">Promise.all</code> to get a promise for all of them and just <code class="language-text">await</code> that promise. Here is a snippet showcasting this common error:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">sequence</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolve <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'first timeout\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolve <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'second timeout\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolve <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'first timeout\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolve <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'second timeout\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// will wait 2s display \'first timeout\', wait 2s again and then display \'second timeout\' => total wait 4s</span>\n<span class="token function">sequence</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// will wait 2s then display first timeout and second timeout at the same time (pretty much) => total wait 2s</span>\n<span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>As I said before, <code class="language-text">await</code> will pause the execute of the async function until the promise it waits is settled.</p>\n<h4>2) Errors mixup</h4>\n<p>When using <code class="language-text">async/await</code> errors get mixup between system error and business logic error. For example if a call to an <code class="language-text">fs</code> function throws an error it would get caught by your <code class="language-text">try/catch</code> the same way as would a <code class="language-text">throw Boom.notFound()</code> hence you need a way to differentiate them. That’s where <code class="language-text">Bounce</code> comes into play. This is a library introduced by Hapi’s creator: Eran Hammer. Taken from <code class="language-text">Bounce</code> github README:</p>\n<blockquote>\n<p>Working with async/await introduces a new challenge in handling errors. Unlike callbacks, which provide a dual mechanism for passing application errors via the callback err argument and developer errors via exceptions, await combines these two channels into one.</p>\n<p>It is common practice to ignore application errors in background processing or when there is no useful fallback. In those cases, it is still imperative to allow developer errors to surface and not get swallowed.</p>\n</blockquote>\n<p><a href="https://github.com/hapijs/bounce#introduction">Source</a></p>\n<p>No need for me to repeat what is already well described over there so just have a look and read it.</p>\n<p>Here you go, you know the bare minimum required to use <code class="language-text">async/await</code> in your code right now! Now go write some awesome code!</p>\n<h2>Hapi@17 difference</h2>\n<p>This section will not go into details about all the differences between the 16 and 17 version but rather compile what we used in our project and what changed about it. If you want a more detailed explanation head over <a href="https://github.com/hapijs/hapi/issues/3658">here</a> and the <a href="https://hapijs.com/api">API documentation</a>.</p>\n<h3>Plugins</h3>\n<h4>Create a plugin</h4>\n<p>The way you create plugin has changed now. You don’t export a function with properties anymore but an object:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// before</span>\nmodule<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">register</span><span class="token punctuation">(</span>server<span class="token punctuation">,</span> options<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token operator">...</span>\n\n  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nmodule<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>attributes <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">\'myPlugin\'</span><span class="token punctuation">,</span> version<span class="token punctuation">:</span> <span class="token string">\'1.0.0\'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// now</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token punctuation">:</span> <span class="token string">\'myPlugin\'</span><span class="token punctuation">,</span>\n  version<span class="token punctuation">:</span> <span class="token string">\'1.0.0\'</span><span class="token punctuation">,</span>\n  <span class="token keyword">async</span> <span class="token function">register</span><span class="token punctuation">(</span>server<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// async operation</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>Taken from <a href="https://hapijs.com/tutorials/plugins?lang=en_US">Hapi tutorial</a>:</p>\n<blockquote>\n<p>As we’ve seen above, the <code class="language-text">register</code> method accepts two parameters, server and options.</p>\n<p>The options parameter is simply whatever options the user passes to your plugin when calling server.register(plugin, options). No changes are made and the object is passed directly to your register method.</p>\n<p><code class="language-text">register</code> should be an async function that returns once your plugin has completed whatever steps are necessary for it to be registered. Alternatively your register plugin should throw an error if an error occurred while registering your plugin.</p>\n<p>The <code class="language-text">server</code> object is a reference to the server your plugin is being loaded in.</p>\n</blockquote>\n<h4>Registering a plugin</h4>\n<p>Loading a plugin is still done through the method <code class="language-text">server.register</code>. You can register one or more plugins. The call to the method should be awaited so you make sure your plugin are loaded before doing action that could require the presence of such plugins. <a href="https://hapijs.com/tutorials/plugins#loading-a-plugin">Here</a> are examples of the different ways you could load a plugin and how to pass options to them.</p>\n<h3>Routes</h3>\n<h4>Adding a route</h4>\n<p>Routes are still added through <code class="language-text">server.route</code> method. The route object still have <code class="language-text">method</code>, <code class="language-text">path</code> and <code class="language-text">handler</code> properties. However the <code class="language-text">config</code> properties has been removed and is now <a href="https://hapijs.com/api#route-options"><code class="language-text">options</code></a>. The handler has changed also:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js">server<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  method<span class="token punctuation">:</span> <span class="token string">\'GET\'</span><span class="token punctuation">,</span>\n  path<span class="token punctuation">:</span> <span class="token string">\'/test\'</span><span class="token punctuation">,</span>\n  <span class="token keyword">async</span> <span class="token function">handler</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> h<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">\'hello\'</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>Your handlers don’t receive the <code class="language-text">reply</code> interface anymore. Instead you get a response toolkit. Taken from <a href="https://hapijs.com/tutorials/routing?lang=en_US">hapi’s tutorial</a>:</p>\n<blockquote>\n<p>The second parameter, h, is the response toolkit, an object with several methods used to respond to the request. As you’ve seen in the previous examples, if you wish to respond to a request with some value, you simply return it from the handler. The payload may be a string, a buffer, a JSON serializable object, a stream or a promise.</p>\n<p>Alternatively you may pass the same value to <code class="language-text">h.response(value)</code> and return that from the handler. The result of this call is a response object, that can be chained with additional methods to alter the response before it is sent. For example <code class="language-text">h.response(&#39;created&#39;).code(201)</code> will send a payload of created with an HTTP status code of 201. You may also set headers, content type, content length, send a redirection response, and many other things that are documented in the <a href="https://hapijs.com/api#response-toolkit">API reference</a>.</p>\n</blockquote>\n<h4>Serving static content</h4>\n<p>Before going into details here, you have to make sure the <code class="language-text">inert</code> plugin is loaded into your server. There are several ways to serve static content:</p>\n<ol>\n<li>Return <code class="language-text">h.file(path)</code> from your handler.</li>\n<li>\n<p>Using a file handler:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js">server<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\nmethod<span class="token punctuation">:</span> <span class="token string">\'GET\'</span><span class="token punctuation">,</span>\npath<span class="token punctuation">:</span> <span class="token string">\'/test-file\'</span><span class="token punctuation">,</span>\nhandler<span class="token punctuation">:</span> <span class="token punctuation">{</span> file<span class="token punctuation">:</span> <span class="token string">\'pathToFile.png\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n</li>\n<li>\n<p>Using a file handler with <code class="language-text">file</code> function property with request params:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js">server<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\nmethod<span class="token punctuation">:</span> <span class="token string">\'GET\'</span><span class="token punctuation">,</span>\npath<span class="token punctuation">:</span> <span class="token string">\'/{filename}\'</span><span class="token punctuation">,</span>\nhandler<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n<span class="token function">file</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> request<span class="token punctuation">.</span>params<span class="token punctuation">.</span>filename<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n</li>\n</ol>\n<p>There are other possibilities so have a look at <a href="https://hapijs.com/tutorials/serving-files?lang=en_US">Hapi’s official tutorial</a>.</p>\n<h4>Access database instance</h4>\n<p>You can still access the database instance through the request object of your handler like you used to when using <code class="language-text">hapi-sequelizejs</code>:</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">handler</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> h<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> db <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getDb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// do awesome stuff</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>',fields:{tagSlugs:["/tags/hapi-17/","/tags/js/","/tags/async/"]},frontmatter:{title:"Hapi 17 Tutorial",tags:["Hapi17","JS","Async"],date:"2018-03-20T22:40:32.169Z",description:"The new major version of Hapi fully embraces the `async/await` feature brought in **ES2017 (ES8)**. This totally changes the way we interact with the framework and one should be comfortable with it to use this new version of Hapi"}}},pathContext:{slug:"/posts/hapi-17-tutorial/"}}}});
//# sourceMappingURL=path---posts-hapi-17-tutorial-1a53aebb656fbf43e563.js.map